import pandas as pd
import streamlit as st
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

image = Image.open('images.jpg')

# –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö
    data = pd.read_csv("–ü–µ—Ä–î–∞–Ω–Ω—ã–µ.csv", index_col=0, encoding='utf-8')
    data_RS = pd.read_csv("data_RS.csv", index_col=0, encoding='utf-8')
    
    # –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    data_Ins = pd.read_csv("data_Ins.csv", index_col=0, encoding='utf-8')
    data_Irs = pd.read_csv("data_Irs.csv", index_col=0, encoding='utf-8')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for df in [data, data_RS, data_Ins, data_Irs]:
        for col in df.columns[1:]:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        df.iloc[:, 1:] = df.iloc[:, 1:].ffill(axis=1).bfill(axis=1)
    
    return {
        'salaries': data,
        'real_salaries': data_RS,
        'nominal_index': data_Ins,
        'real_index': data_Irs
    }

def main():
    plt.switch_backend('Agg')  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Streamlit
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
    data_dict = load_data()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    page = st.sidebar.selectbox(
        "–í—ã–±—Ä–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:", 
        ["–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
         "–ê–Ω–∞–ª–∏–∑ –∑/–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º", 
         "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∏ —Ä–µ–∞–ª—å–Ω–æ–π –∑/–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º",
         "–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑\–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º",
         "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑/–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º"]
    )

    if page == "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        st.header("""–ü—Ä–æ–µ–∫—Ç: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –≤ –†–æ—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 2000 –ø–æ 2023 –≥–≥.(–ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ—Ç—Ä–∞—Å–ª—è–º) —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö""")
        st.write(
        """    
        ### –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –≤ –†–æ—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 2000 –ø–æ 2028 –≥–≥.(–ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ—Ç—Ä–∞—Å–ª—è–º) #### 
        """)
        st.image(image, width=700)

    elif page == "–ê–Ω–∞–ª–∏–∑ –∑/–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º":
        st.title("üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç –∑–∞ 2000-2023 –≥–≥. –ø–æ –≤–∏–¥–∞–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        sector = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:",
            options=data_dict['salaries']['Economics_section'].unique(),
            index=1
        )
        
        if sector:
            austr = data_dict['salaries'].loc[data_dict['salaries']['Economics_section'].eq(sector)]
            years = [int(col) for col in austr.columns if col.startswith('20')]
            values = austr.filter(regex=r'^20\d{2}$').values[0]
            values2 = values/1000

            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(years, values2, linewidth=3)
            ax.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç: {sector.strip()}', fontsize=14)
            ax.set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ç—ã—Å. —Ä—É–±.', fontsize=12)
            ax.set_xlabel('–ì–æ–¥', fontsize=12)
            ax.grid(True, linestyle='--', alpha=0.7)
            ax.set_xticks(np.arange(2000, 2024, 2))
            
            st.pyplot(fig, clear_figure=True)
            st.subheader("–î–∞–Ω–Ω—ã–µ")
            df_show = pd.DataFrame({
                '–ì–æ–¥': years,
                '–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)': values})
            
            st.dataframe(
                df_show.style.format({"–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)": "{:.0f}"}),
                use_container_width=True
            )

    elif page == "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∏ —Ä–µ–∞–ª—å–Ω–æ–π –∑/–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º":
        st.title("üìâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∏ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç (2000-2023 –≥–≥.)")
        
        sector = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:",
            options=data_dict['salaries']['Economics_section'].unique(),
            index=1
        )
        
        if sector:
            austr = data_dict['salaries'].loc[data_dict['salaries']['Economics_section'].eq(sector)]
            austr_2 = data_dict['real_salaries'].loc[data_dict['real_salaries']['Economics_section'].eq(sector)]
            
            years = [int(col) for col in austr.columns if col.startswith('20')]
            nominal = austr.filter(regex=r'^20\d{2}$').values[0]
            real = austr_2.filter(regex=r'^20\d{2}$').values[0]
            nominal2 = nominal/1000
            real2 = real/1000

            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(years, nominal2, linewidth=3, label='–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞')
            ax.plot(years, real2, linewidth=3, label='–†–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞')
            
            ax.set_title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç: {sector.strip()}', fontsize=14)
            ax.set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ç—ã—Å. —Ä—É–±.', fontsize=12)
            ax.set_xlabel('–ì–æ–¥', fontsize=12)
            ax.legend(fontsize=12)
            ax.grid(True, linestyle='--', alpha=0.7)
            ax.set_xticks(np.arange(2000, 2024, 2))
            
            st.pyplot(fig, clear_figure=True)
            
            df_show = pd.DataFrame({
                '–ì–æ–¥': years,
                '–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è (—Ä—É–±)': nominal,
                '–†–µ–∞–ª—å–Ω–∞—è (—Ä—É–±)': real
            })
            
            st.dataframe(
                df_show.style.format({
                    "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è (—Ä—É–±)": "{:.0f}",
                    "–†–µ–∞–ª—å–Ω–∞—è (—Ä—É–±)": "{:.0f}"
                }),
                use_container_width=True
            )

    elif page == "–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑\–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º":
        st.title("üìù –ò–Ω–¥–µ–∫—Å—ã –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∏ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç (2001-2023 –≥–≥.)")
        
        sector = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:",
            options=data_dict['nominal_index']['Economics_section'].unique(),
            index=1
        )
        
        if sector:
            austr = data_dict['nominal_index'].loc[data_dict['nominal_index']['Economics_section'].eq(sector)]
            austr_2 = data_dict['real_index'].loc[data_dict['real_index']['Economics_section'].eq(sector)]

            years = [int(col) for col in austr.columns if col.startswith('20') and int(col) >= 2001]
            nominal = austr[[str(year) for year in years]].values[0]
            real = austr_2[[str(year) for year in years]].values[0]

            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(years, nominal, 'b-', linewidth=2, label='–ò–Ω–¥–µ–∫—Å –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã')
            ax.plot(years, real, 'r-', linewidth=2, label='–ò–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã')

            ax.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞—Ä–ø–ª–∞—Ç: {sector.strip()}', fontsize=14)
            ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞', fontsize=12)
            ax.set_xlabel('–ì–æ–¥', fontsize=12)
            ax.legend(fontsize=12)
            ax.grid(True, linestyle='--', alpha=0.5)
            ax.set_xticks(np.arange(2001, 2024, 2))

            st.pyplot(fig, clear_figure=True)
            
            df_show = pd.DataFrame({
                '–ì–æ–¥': years,
                '–ò–Ω–¥–µ–∫—Å –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã': nominal,
                '–ò–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã': real
            })
            
            st.dataframe(
                df_show.style.format({
                    '–ò–Ω–¥–µ–∫—Å –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã': '{:.2f}',
                    '–ò–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã': '{:.2f}'
                }),
                use_container_width=True
            )

    elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑/–ø –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º":
        st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç –Ω–∞ 2024-2028 –≥–æ–¥—ã")
        st.markdown("""
        **–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:**
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –º–æ–¥–µ–ª–∏ ARIMA –∏ Prophet
        - –ü—Ä–æ–≥–Ω–æ–∑—ã –≤–∑–≤–µ—à–µ–Ω—ã –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        - –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        """)
    
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        forecasts = pd.read_csv("–≤—Å–µ_–æ—Ç—Ä–∞—Å–ª–∏_–ø—Ä–æ–≥–Ω–æ–∑_–∑–∞—Ä–ø–ª–∞—Ç_2024_2028.csv")
        
        sector = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:",
            options=forecasts['–û—Ç—Ä–∞—Å–ª—å'].unique(),
            index=0
        )
        
        if sector:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data_per = data_dict['salaries']
            data_rs = data_dict['real_salaries']
            hist_data_per = data_per.loc[data_per['Economics_section'] == sector]
            hist_data_rs = data_rs.loc[data_rs['Economics_section'] == sector]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            hist_years = [int(col) for col in hist_data_per.columns if col.startswith('20')]
            nominal_hist = hist_data_per.filter(regex=r'^20\d{2}$').values[0]
            real_hist = hist_data_rs.filter(regex=r'^20\d{2}$').values[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            sector_forecasts = forecasts[forecasts['–û—Ç—Ä–∞—Å–ª—å'] == sector]
            forecast_years = sector_forecasts['–ì–æ–¥']
            nominal_forecast = sector_forecasts['–ü—Ä–æ–≥–Ω–æ–∑_–Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π_–∑–∞—Ä–ø–ª–∞—Ç—ã']
            real_forecast = sector_forecasts['–ü—Ä–æ–≥–Ω–æ–∑_—Ä–µ–∞–ª—å–Ω–æ–π_–∑–∞—Ä–ø–ª–∞—Ç—ã']
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            ax.plot(hist_years, nominal_hist, 'b-', linewidth=2, label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è')
            ax.plot(hist_years, real_hist, 'g-', linewidth=2, label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª—å–Ω–∞—è')
            
            # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            ax.plot(forecast_years, nominal_forecast, 'b--', marker='o', markersize=6, 
                   linewidth=2, label='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π')
            ax.plot(forecast_years, real_forecast, 'g--', marker='s', markersize=6, 
                   linewidth=2, label='–ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∞–ª—å–Ω–æ–π')
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–º
            ax.axvline(x=2023.5, color='gray', linestyle=':', linewidth=2)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title(f'–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç: {sector}', fontsize=16)
            ax.set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±.', fontsize=12)
            ax.set_xlabel('–ì–æ–¥', fontsize=12)
            ax.legend(fontsize=10, loc='upper left')
            ax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)
            ax.set_axisbelow(True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for year, nom, real in zip(forecast_years, nominal_forecast, real_forecast):
                ax.text(year, nom, f"{int(nom):,}".replace(",", " "), 
                       ha='center', va='bottom', fontsize=9)
                ax.text(year, real, f"{int(real):,}".replace(",", " "), 
                       ha='center', va='top', fontsize=9)
            
            st.pyplot(fig, clear_figure=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
            st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
            
            display_df = sector_forecasts[[
                '–ì–æ–¥', 
                '–ü—Ä–æ–≥–Ω–æ–∑_–Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π_–∑–∞—Ä–ø–ª–∞—Ç—ã', 
                '–ü—Ä–æ–≥–Ω–æ–∑_—Ä–µ–∞–ª—å–Ω–æ–π_–∑–∞—Ä–ø–ª–∞—Ç—ã',
                '–û—à–∏–±–∫–∞_–Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π_–∑–∞—Ä–ø–ª–∞—Ç—ã', 
                '–û—à–∏–±–∫–∞_—Ä–µ–∞–ª—å–Ω–æ–π_–∑–∞—Ä–ø–ª–∞—Ç—ã'
            ]].copy()
            
            display_df.columns = [
                '–ì–æ–¥', 
                '–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)', 
                '–†–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)',
                '–û—à–∏–±–∫–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π (%)', 
                '–û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π (%)'
            ]
            
            display_df['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)'] = display_df['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)'].apply(
                lambda x: f"{int(x):,}".replace(",", " "))
            display_df['–†–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)'] = display_df['–†–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)'].apply(
                lambda x: f"{int(x):,}".replace(",", " "))
            display_df['–û—à–∏–±–∫–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π (%)'] = display_df['–û—à–∏–±–∫–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π (%)'].apply(
                lambda x: f"{x:.2f}%")
            display_df['–û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π (%)'] = display_df['–û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π (%)'].apply(
                lambda x: f"{x:.2f}%")
            
            st.dataframe(
                display_df.set_index('–ì–æ–¥'),
                use_container_width=True
            )

if __name__ == "__main__":
    main()
